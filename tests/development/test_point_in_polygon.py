#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para verificar la funcionalidad de detecci√≥n de localidad
por coordenadas usando algoritmos de punto-en-pol√≠gono.

Este script prueba:
1. La API de detecci√≥n de localidad por coordenadas
2. Los algoritmos de punto-en-pol√≠gono implementados
3. La precisi√≥n de los l√≠mites territoriales
4. Casos de borde y coordenadas fuera de Bogot√°
"""

import requests
import json
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path para importar m√≥dulos de la app
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from app.models.localidad import Localidad
from app.utils.polygon_utils import point_in_polygon, validate_polygon_coordinates

def test_api_detection():
    """
    Prueba la API de detecci√≥n de localidad por coordenadas
    """
    print("üß™ Probando API de detecci√≥n de localidad por coordenadas")
    print("=" * 60)
    
    # Coordenadas de prueba en diferentes localidades de Bogot√°
    test_coordinates = [
        {
            'name': 'Centro de Bogot√° (La Candelaria)',
            'lat': 4.5981,
            'lng': -74.0758,
            'expected_localidad': 'CANDELARIA'
        },
        {
            'name': 'Zona Rosa (Chapinero)',
            'lat': 4.6698,
            'lng': -74.0440,
            'expected_localidad': 'CHAPINERO'
        },
        {
            'name': 'Kennedy Central',
            'lat': 4.6276,
            'lng': -74.1378,
            'expected_localidad': 'KENNEDY'
        },
        {
            'name': 'Suba Centro',
            'lat': 4.7570,
            'lng': -74.0840,
            'expected_localidad': 'SUBA'
        },
        {
            'name': 'Usaqu√©n',
            'lat': 4.7045,
            'lng': -74.0307,
            'expected_localidad': 'USAQUEN'
        },
        {
            'name': 'Fuera de Bogot√° (Ch√≠a)',
            'lat': 4.8614,
            'lng': -74.0583,
            'expected_localidad': None
        }
    ]
    
    base_url = 'http://localhost:5000'
    api_url = f'{base_url}/api/localidades/detect-by-coordinates'
    
    results = []
    
    for test_case in test_coordinates:
        print(f"\nüìç Probando: {test_case['name']}")
        print(f"   Coordenadas: ({test_case['lat']}, {test_case['lng']})")
        
        try:
            # Hacer petici√≥n a la API
            response = requests.post(api_url, json={
                'latitud': test_case['lat'],
                'longitud': test_case['lng']
            }, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    localidad_encontrada = data.get('localidad', {}).get('nombre')
                    dentro_de_localidad = data.get('dentro_de_localidad', False)
                    
                    print(f"   ‚úÖ Localidad detectada: {localidad_encontrada}")
                    print(f"   üìç Dentro de l√≠mites: {'S√≠' if dentro_de_localidad else 'No'}")
                    
                    # Verificar si coincide con lo esperado
                    if test_case['expected_localidad']:
                        if localidad_encontrada and test_case['expected_localidad'].upper() in localidad_encontrada.upper():
                            print(f"   ‚úÖ Resultado correcto")
                            results.append({'test': test_case['name'], 'status': 'PASS', 'details': f"Detect√≥ {localidad_encontrada}"})
                        else:
                            print(f"   ‚ö†Ô∏è  Resultado inesperado (esperaba {test_case['expected_localidad']})")
                            results.append({'test': test_case['name'], 'status': 'FAIL', 'details': f"Esperaba {test_case['expected_localidad']}, obtuvo {localidad_encontrada}"})
                    else:
                        # Caso fuera de Bogot√°
                        if not dentro_de_localidad:
                            print(f"   ‚úÖ Correctamente detectado fuera de l√≠mites")
                            results.append({'test': test_case['name'], 'status': 'PASS', 'details': "Correctamente fuera de l√≠mites"})
                        else:
                            print(f"   ‚ö†Ô∏è  Deber√≠a estar fuera de l√≠mites")
                            results.append({'test': test_case['name'], 'status': 'FAIL', 'details': "Deber√≠a estar fuera de l√≠mites"})
                else:
                    print(f"   ‚ùå API retorn√≥ error: {data.get('message')}")
                    results.append({'test': test_case['name'], 'status': 'ERROR', 'details': data.get('message')})
            else:
                print(f"   ‚ùå Error HTTP {response.status_code}: {response.text}")
                results.append({'test': test_case['name'], 'status': 'ERROR', 'details': f"HTTP {response.status_code}"})
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
            results.append({'test': test_case['name'], 'status': 'ERROR', 'details': f"Conexi√≥n: {e}"})
        except Exception as e:
            print(f"   ‚ùå Error inesperado: {e}")
            results.append({'test': test_case['name'], 'status': 'ERROR', 'details': f"Error: {e}"})
    
    return results

def test_direct_polygon_functions():
    """
    Prueba directamente las funciones de pol√≠gonos sin API
    """
    print(f"\nüî¨ Probando funciones de pol√≠gonos directamente")
    print("=" * 60)
    
    app = create_app()
    with app.app_context():
        try:
            # Obtener algunas localidades con geometr√≠a
            localidades = Localidad.query.filter(
                Localidad.geometria.isnot(None)
            ).limit(5).all()
            
            print(f"üìä Localidades con geometr√≠a encontradas: {len(localidades)}")
            
            results = []
            
            for localidad in localidades:
                print(f"\nüèõÔ∏è  Probando localidad: {localidad.nombre} ({localidad.codigo})")
                
                # Validar geometr√≠a
                if localidad.validate_geometry():
                    print(f"   ‚úÖ Geometr√≠a v√°lida")
                    
                    # Probar con el centroide (deber√≠a estar dentro)
                    centroide = localidad.get_centroide()
                    if centroide:
                        dentro = localidad.contains_point(centroide['lat'], centroide['lng'])
                        print(f"   üìç Centroide ({centroide['lat']:.6f}, {centroide['lng']:.6f}): {'Dentro' if dentro else 'Fuera'}")
                        
                        if dentro:
                            results.append({'test': f"{localidad.nombre} - Centroide", 'status': 'PASS', 'details': 'Centroide dentro del pol√≠gono'})
                        else:
                            results.append({'test': f"{localidad.nombre} - Centroide", 'status': 'FAIL', 'details': 'Centroide fuera del pol√≠gono'})
                    
                    # Obtener l√≠mites
                    bounds = localidad.get_bounds()
                    if bounds:
                        print(f"   üìê L√≠mites: ({bounds['min_lat']:.6f}, {bounds['min_lng']:.6f}) a ({bounds['max_lat']:.6f}, {bounds['max_lng']:.6f})")
                        results.append({'test': f"{localidad.nombre} - L√≠mites", 'status': 'PASS', 'details': 'L√≠mites calculados correctamente'})
                    
                else:
                    print(f"   ‚ùå Geometr√≠a inv√°lida")
                    results.append({'test': f"{localidad.nombre} - Geometr√≠a", 'status': 'FAIL', 'details': 'Geometr√≠a inv√°lida'})
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error en pruebas directas: {e}")
            return [{'test': 'Pruebas directas', 'status': 'ERROR', 'details': str(e)}]

def test_polygon_api_endpoints():
    """
    Prueba los endpoints de pol√≠gonos
    """
    print(f"\nüåê Probando endpoints de pol√≠gonos")
    print("=" * 60)
    
    base_url = 'http://localhost:5000'
    endpoints = [
        '/api/localidades',
        '/api/localidades/polygons',
        '/api/localidades/01/polygon',  # Usaqu√©n
        '/api/localidades/01/bounds'    # Usaqu√©n
    ]
    
    results = []
    
    for endpoint in endpoints:
        print(f"\nüîó Probando: {endpoint}")
        
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success', True):  # Algunos endpoints no tienen 'success'
                    print(f"   ‚úÖ Respuesta exitosa")
                    
                    # Verificar contenido espec√≠fico seg√∫n endpoint
                    if 'polygons' in endpoint:
                        features = data.get('features', [])
                        print(f"   üìä Pol√≠gonos retornados: {len(features)}")
                        results.append({'test': endpoint, 'status': 'PASS', 'details': f"{len(features)} pol√≠gonos"})
                    elif 'bounds' in endpoint:
                        bounds = data.get('bounds', {})
                        if bounds:
                            print(f"   üìê L√≠mites obtenidos: {bounds}")
                            results.append({'test': endpoint, 'status': 'PASS', 'details': 'L√≠mites obtenidos'})
                        else:
                            results.append({'test': endpoint, 'status': 'FAIL', 'details': 'Sin l√≠mites'})
                    else:
                        total = data.get('total', len(data.get('localidades', [])))
                        print(f"   üìä Elementos retornados: {total}")
                        results.append({'test': endpoint, 'status': 'PASS', 'details': f"{total} elementos"})
                else:
                    print(f"   ‚ùå API retorn√≥ error: {data.get('message')}")
                    results.append({'test': endpoint, 'status': 'FAIL', 'details': data.get('message')})
            else:
                print(f"   ‚ùå Error HTTP {response.status_code}")
                results.append({'test': endpoint, 'status': 'ERROR', 'details': f"HTTP {response.status_code}"})
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
            results.append({'test': endpoint, 'status': 'ERROR', 'details': f"Conexi√≥n: {e}"})
        except Exception as e:
            print(f"   ‚ùå Error inesperado: {e}")
            results.append({'test': endpoint, 'status': 'ERROR', 'details': f"Error: {e}"})
    
    return results

def generate_test_report(all_results):
    """
    Genera un reporte de todas las pruebas
    """
    print(f"\nüìã REPORTE DE PRUEBAS - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    error_tests = 0
    
    for category, results in all_results.items():
        print(f"\nüìÇ {category}:")
        
        for result in results:
            total_tests += 1
            status = result['status']
            
            if status == 'PASS':
                icon = '‚úÖ'
                passed_tests += 1
            elif status == 'FAIL':
                icon = '‚ùå'
                failed_tests += 1
            else:
                icon = '‚ö†Ô∏è'
                error_tests += 1
            
            print(f"   {icon} {result['test']}: {result['details']}")
    
    print(f"\nüìä RESUMEN:")
    print(f"   ‚Ä¢ Total de pruebas: {total_tests}")
    print(f"   ‚Ä¢ Exitosas: {passed_tests} ({(passed_tests/total_tests*100):.1f}%)")
    print(f"   ‚Ä¢ Fallidas: {failed_tests} ({(failed_tests/total_tests*100):.1f}%)")
    print(f"   ‚Ä¢ Errores: {error_tests} ({(error_tests/total_tests*100):.1f}%)")
    
    if passed_tests == total_tests:
        print(f"\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        return True
    elif passed_tests >= total_tests * 0.8:
        print(f"\n‚úÖ La mayor√≠a de pruebas pasaron (‚â•80%)")
        return True
    else:
        print(f"\n‚ö†Ô∏è  Muchas pruebas fallaron. Revisar implementaci√≥n.")
        return False

if __name__ == "__main__":
    print("üöÄ Test de Funcionalidad Punto-en-Pol√≠gono - Synapsis Apoyos")
    print("=" * 80)
    
    all_results = {}
    
    # Ejecutar todas las pruebas
    try:
        print("\n1Ô∏è‚É£  Probando endpoints de pol√≠gonos...")
        all_results['Endpoints de Pol√≠gonos'] = test_polygon_api_endpoints()
        
        print("\n2Ô∏è‚É£  Probando API de detecci√≥n...")
        all_results['API de Detecci√≥n'] = test_api_detection()
        
        print("\n3Ô∏è‚É£  Probando funciones directas...")
        all_results['Funciones Directas'] = test_direct_polygon_functions()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Pruebas interrumpidas por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error general en las pruebas: {e}")
        sys.exit(1)
    
    # Generar reporte final
    success = generate_test_report(all_results)
    
    if success:
        print(f"\n‚úÖ Funcionalidad de punto-en-pol√≠gono implementada correctamente")
        sys.exit(0)
    else:
        print(f"\n‚ùå Se encontraron problemas en la implementaci√≥n")
        sys.exit(1)